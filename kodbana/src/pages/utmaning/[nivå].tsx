import { useRouter } from "next/router";
import utmaningar from "@/data/utmaningar";
import { useEffect, useState } from "react";
import Popup from "@/components/Popup";
import { doc, updateDoc, getFirestore } from "firebase/firestore";
import { getAuth } from "firebase/auth";

export default function UtmaningPage() {
  const router = useRouter();
  const { niv√• } = router.query;
  const [uppgift, setUppgift] = useState<any>(null);
  const [svar, setSvar] = useState("");
  const [resultat, setResultat] = useState<null | "r√§tt" | "fel">(null);
  const [visaPopup, setVisaPopup] = useState(false);

  useEffect(() => {
    if (niv√• && utmaningar[niv√• as string]) {
      setUppgift(utmaningar[niv√• as string]);
    }
  }, [niv√•]);

  const kontrolleraSvar = async () => {
    if (!uppgift) return;

    const √§rR√§tt = svar.trim().toLowerCase() === uppgift.korrektSvar.trim().toLowerCase();
    setResultat(√§rR√§tt ? "r√§tt" : "fel");

    if (√§rR√§tt) {
      const auth = getAuth();
      const user = auth.currentUser;
      const db = getFirestore();
      if (user) {
        const userRef = doc(db, "users", user.uid);
        await updateDoc(userRef, {
          xp: (uppgift.xp || 10),
        });
      }

      if (niv√• === "3" || niv√• === "10") {
        setTimeout(() => setVisaPopup(true), 500);
      }
    }
  };

  const n√§staNiv√• = () => {
    const n√§sta = parseInt(niv√• as string) + 1;
    router.push(`/utmaning/${n√§sta}`);
  };

  if (!uppgift) return <div className="p-4">Laddar niv√•...</div>;

  return (
    <div className="p-6 max-w-xl mx-auto">
      <h1 className="text-2xl font-bold mb-2">üß† Niv√• {niv√•}</h1>
      <p className="text-gray-600 text-sm mb-2">Rekommenderad √•lder: {uppgift.alder[0]}‚Äì{uppgift.alder[1]} √•r</p>
      <p className="mb-4">{uppgift.fraga}</p>

      {uppgift.typ === "multiple_choice" &&
        uppgift.alternativ.map((alt: string, i: number) => (
          <button
            key={i}
            className="block w-full border p-2 mb-2 rounded hover:bg-gray-100"
            onClick={() => setSvar(alt)}
          >
            {alt}
          </button>
        ))}

      {uppgift.typ === "text" && (
        <textarea
          className="w-full border p-2 mb-4"
          rows={3}
          placeholder="Skriv ditt svar h√§r..."
          onChange={(e) => setSvar(e.target.value)}
        />
      )}

      <button onClick={kontrolleraSvar} className="bg-blue-600 text-white py-2 px-4 rounded">
        Kontrollera svar
      </button>

      {resultat && (
        <p className={`mt-4 text-lg font-semibold ${resultat === "r√§tt" ? "text-green-600" : "text-red-600"}`}>
          {resultat === "r√§tt" ? "R√§tt svar! üéâ" : "Tyv√§rr, f√∂rs√∂k igen!"}
        </p>
      )}

      {resultat === "r√§tt" && (
        <button onClick={n√§staNiv√•} className="mt-4 block underline text-blue-600">
          G√• till n√§sta niv√• ‚Üí
        </button>
      )}

      {visaPopup && <Popup niv√•={niv√• as string} onClose={() => setVisaPopup(false)} />}
    </div>
  );
}
